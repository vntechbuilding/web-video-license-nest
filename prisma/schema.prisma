// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model user {
  id                     String                   @id @default(uuid())
  email                  String                   @unique
  phone                  String                   @unique
  fullName               String
  hash                   String
  verifyCode             String?
  isVerified             Boolean                  @default(false)
  createdAt              DateTime                 @default(now())
  updatedAt              DateTime                 @updatedAt
  disabled               Boolean                  @default(false)
  userAuthTokenExpired   userAuthTokenExpired[]
  userAuthToken          userAuthToken[]
  userForgotPasswordCode userForgotPasswordCode[]
}

model userForgotPasswordCode {
  id        String   @id @default(uuid())
  createdAt DateTime @default(now())
  code      String   @unique
  userId    String
  user      user     @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)

  @@index([createdAt])
  @@index([code])
  @@index([userId])
}

// Danh sách các token hết hạn, theo dõi nếu được sử dụng lại sẽ cho vào blacklist.
// Sau khoảng 2 tháng thì xoá dữ liệu này đi.
// Cái này check ngầm
model userAuthTokenExpired {
  id           String   @id @default(uuid())
  userId       String
  user         user     @relation(fields: [userId], references: [id], onDelete: Restrict, onUpdate: Cascade)
  accessToken  String[]
  refreshToken String?  @unique
  createdAt    DateTime @default(now())
}

// Chứa thông tin đăng nhập của User
model userAuthToken {
  id           String   @id @default(uuid())
  createdAt    DateTime @default(now())
  usedAt       DateTime @default(now())
  publicKey    String   @unique
  refreshToken String   @unique
  userId       String
  user         user     @relation(fields: [userId], references: [id], onDelete: Restrict, onUpdate: Cascade)
  ip           String
  userAgent    String

  @@index([refreshToken])
  @@index([userId])
  @@index([userId, createdAt])
}

model admin {
  id                    String                  @id @default(uuid())
  username              String                  @unique
  hash                  String
  createdAt             DateTime                @default(now())
  updatedAt             DateTime                @updatedAt
  disabled              Boolean                 @default(false)
  adminAuthTokenExpired adminAuthTokenExpired[]
  adminAuthToken        adminAuthToken[]
}

model adminAuthTokenExpired {
  id           String   @id @default(uuid())
  adminId      String
  admin        admin    @relation(fields: [adminId], references: [id], onDelete: Restrict, onUpdate: Cascade)
  accessToken  String[]
  refreshToken String?  @unique
  createdAt    DateTime @default(now())
}

model adminAuthToken {
  id           String   @id @default(uuid())
  createdAt    DateTime @default(now())
  publicKey    String   @unique
  refreshToken String   @unique
  adminId      String
  admin        admin    @relation(fields: [adminId], references: [id], onDelete: Restrict, onUpdate: Cascade)
  ip           String
  userAgent    String

  @@index([id])
  @@index([refreshToken])
  @@index([adminId])
}
